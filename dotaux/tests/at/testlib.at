# Test suite for dotAux libs.                         -*- Autotest -*-
#---------------------------------------
#
# Copyright (c) 2009-2014 The dotAux project.
#
# This file is a part of the dotAux project, and is 
# copyrighted by Pat Huang and/or others who actually
# wrote it.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# See also
# <http://www.opensource.org/licenses/mit-license.php>
#
# Contact the project <staff.effo@gmail.com> or 
# contact Pat Huang <pat.sh.cn@gmail.com>
#
#---------------------------------------

AT_BANNER([Test dotAux m4 lib])

AT_SETUP([dotAux lib including])
# lib got included in local.at
AT_KEYWORDS([include])
DAT_SHELL_FN
AS_MESSAGE(DAS_EXEC([pwd]))
dat_fn_env "testlib"

DAT_CHK([pwd])

AT_CLEANUP

AT_SETUP(['Compile m4sh'])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
AS_VAR_SET([m4shcode], [0])
]],
[DAT_CHK([./m4shtest])],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([Try use AT@&t@_CHECK])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR], [],
[[
AS_ECHO(['Hello World!'])
AS_VAR_SET([m4shcode], [0])
]],
[
	AT_CHECK([./m4shtest], [0], [Hello World!
])
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP(['DAS@&t@_LOC_IN_PATH'])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN
das_fn_loc_in_path "sh"
AS_VAR_SET([m4shcode], [0])
]],
[DAT_CHK([./m4shtest])],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([UN/DEF_VAR - Obsolete])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[

DAS_DEF_VAR([var1], [2])
AS_ECHO([v1=2,var1=$var1,v2=,var2=$var2])
DAS_DEF_VAR([var2], [2])
AS_ECHO([v1=2,var1=$var1,v2=2,var2=$var2])

DAS_DEF_VAR([var1], [3])
AS_ECHO([v1=3,var1=$var1,v2=2,var2=$var2])
DAS_DEF_VAR([var2], [3])
AS_ECHO([v1=3,var1=$var1,v2=3,var2=$var2])

DAS_UNDEF_VAR([var1])
AS_ECHO([v1=2,var1=$var1,v2=3,var2=$var2])
DAS_UNDEF_VAR([var2])
AS_ECHO([v1=2,var1=$var1,v2=2,var2=$var2])

DAS_UNDEF_VAR([var1])
AS_ECHO([v1=,var1=$var1,v2=2,var2=$var2])
DAS_UNDEF_VAR([var2])
AS_ECHO([v1=,var1=$var1,v2=,var2=$var2])

AS_VAR_SET([m4shcode], [0])
]],
[
	AT_CHECK([./m4shtest], [0], [dnl
v1=2,das_def_var1=2,v2=,var2=
v1=2,das_def_var1=2,v2=2,das_def_var2=2
v1=3,das_def_var1=3,v2=2,das_def_var2=2
v1=3,das_def_var1=3,v2=3,das_def_var2=3
v1=2,das_def_var1=3,v2=3,das_def_var2=3
v1=2,das_def_var1=3,v2=2,das_def_var2=3
v1=,var1=,v2=2,das_def_var2=3
v1=,var1=,v2=,var2=
])
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP(['dirname/basename'])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN
AS_VAR_SET([p], [./abc/def/////])
das_fn_dirname "$p"
das_fn_basename "$p"
AS_VAR_SET([m4shcode], [0])
]],
[
	AT_CHECK([./m4shtest], [0], [dnl
./abc
def
])
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([mydir "./"])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN
das_fn_mydir
AS_VAR_SET([m4shcode], [0])
]],
[
(#subshell local vars
AS_VAR_SET([output], $(./m4shtest))
AS_MESSAGE([Output: '$output'])
AS_VAR_IF([output], [.],
[
	DAT_CHK([:])
],
[
	AS_MESSAGE([mydir=$output])
	AT_FAIL_IF([:])
])
)
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([mydir "./abc/"])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN
das_fn_mydir
AS_VAR_SET([m4shcode], [0])
]],
[
mkdir abc
cp -f m4shtest abc/
(#subshell local vars
AS_VAR_SET([output], $(./abc/m4shtest))
AS_MESSAGE([Output: '$output'])
AS_VAR_IF([output], [./abc],
[
	DAT_CHK([:])
],
[
	AS_MESSAGE([mydir=$output])
	AT_FAIL_IF([:])
])
)
rm -rf abc
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([locself "pwd/"])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN
das_fn_locself
AS_VAR_SET([m4shcode], [0])
]],
[
(#subshell local vars
AS_VAR_SET([output], $(./m4shtest))
AS_VAR_IF([output], [DAS_EXEC([pwd])/m4shtest],
[
	DAT_CHK([:])
],
[
	AS_MESSAGE([locself=$output])
	AT_FAIL_IF([:])
])
)
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([locself "pwd/abc/"])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN
das_fn_locself
AS_VAR_SET([m4shcode], [0])
]],
[
mkdir abc
cp -f m4shtest abc/
(#subshell local vars
AS_VAR_SET([output], $(./abc/m4shtest))
AS_VAR_IF([output], [DAS_EXEC([pwd])/abc/m4shtest],
[
	DAT_CHK([:])
],
[
	AS_MESSAGE([locself=$output])
	AT_FAIL_IF([:])
])
)
rm -rf abc
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([Intro Self])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN
DAS_INTRO_SELF([1.0])
AS_VAR_SET([m4shcode], [0])
]],
[
(#subshell local vars
AS_VAR_SET([output], $(./m4shtest))
AS_VAR_IF([output], ["I'm m4shtest (v1.0) on DAS_EXEC([pwd]), working on DAS_EXEC([pwd])!"],
[
	DAT_CHK([:])
],
[
	AS_MESSAGE([introself=$output])
	AT_FAIL_IF([:])
])
)
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

#rm -f m4shtest*

AT_CLEANUP

AT_SETUP([Trim])
AT_KEYWORDS([m4sh language])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN

das_fn_str_trim "  value  "
das_fn_str_trim "	 value  "
das_fn_str_trim " 	 value  "
das_fn_str_trim " 	value  "
das_fn_str_trim " value	 "
das_fn_str_trim " value 	 "
das_fn_str_trim " value 	"

AS_VAR_SET([m4shcode], [0])
]],
[
AT_CHECK([./m4shtest], [0], [dnl
value
value
value
value
value
value
value
])
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([Parse Value])
AT_KEYWORDS([m4sh language])
DAS_DATA([input], [
Key1:	Val1  	
Key2 = 		Val2.0	  	Val2.1  	  
])
DAS_COMPILE_M4SH([m4shtest], [-I DAT_MYLIBDIR],
[[
m4_include([dmeta/das.m4])
]],
[[
DAS_SHELL_FN

(#subshell local vars
AS_VAR_SET([KEY], ["Key"])
AS_VAR_SET([VAL], ["Val"])
AS_VAR_SET([str])

str="$KEY:$VAL"
das_fn_str_parse_value "$str" "$KEY" ":"
str="$KEY :$VAL"
das_fn_str_parse_value "$str" "$KEY" ":"
str="$KEY: $VAL"
das_fn_str_parse_value "$str" "$KEY" ":"
str="$KEY : $VAL"
das_fn_str_parse_value "$str" "$KEY" ":"

str="$KEY=$VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY =$VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY= $VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY = $VAL"
das_fn_str_parse_value "$str" "$KEY" "="

str="$KEY:=$VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY :=$VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY:= $VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY := $VAL"
das_fn_str_parse_value "$str" "$KEY" "="

str="$KEY=:$VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY =:$VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY=: $VAL"
das_fn_str_parse_value "$str" "$KEY" "="
str="$KEY =: $VAL"
das_fn_str_parse_value "$str" "$KEY" "="

das_fn_file_parse_value "input" "Key1"
das_fn_file_parse_value "input" "Key2" "="

)

AS_VAR_SET([m4shcode], [0])
]],
[
AT_CHECK([./m4shtest], [0], [dnl
Val
Val
Val
Val
Val
Val
Val
Val
Val
Val
Val
Val
Val
Val
Val
Val
Val1
Val2.0	  	Val2.1
])

rm -f input
],
[
	AS_MESSAGE([code=$das_compile_status])
	AT_FAIL_IF([:])
])

rm -f m4shtest*

AT_CLEANUP

AT_SETUP([Compile C])
AT_KEYWORDS([C language])
DAT_SHELL_FN
DAS_COMPILE([ctest], [],
[[
#include <stdio.h>
]],
[[
int a = 0; int b = 0;
printf("%d.%d\n", a, b);
]],
[DAT_CHK([:])], [AT_FAIL_IF([:])]
)

rm -f ctest*

AT_CLEANUP

AT_SETUP([Compile C++])
AT_KEYWORDS([C++ language])
DAT_SHELL_FN
DAS_COMPILE_CXX([cxxtest], [],
[[
#include <iostream>
using namespace std;
]],
[[
int a = 0; int b = 0;
cout << a << ", " << b << endl;
]],
[DAT_CHK([:])], [AT_FAIL_IF([:])]
)

rm -f cxxtest*

AT_CLEANUP

